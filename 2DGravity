import pygame, os, time, math
from pygame import *
white = pygame.Color( 255, 255, 255 )
black = pygame.Color( 0, 0, 0 )
gray = pygame.Color( 90, 90, 90 )
silver = pygame.Color( 200, 200, 200 )
red = pygame.Color( 255, 0, 0 )
green = pygame.Color( 0, 255, 0 )
blue = pygame.Color( 0, 0, 255 )


pygame.mixer.init()
class Block( pygame.sprite.Sprite ):

    def __init__( self, color = blue, width = 64, height = 64 ):

        super( Block, self ).__init__()
        self.image = pygame.Surface(( width, height ))
        self.image.fill( color )

        self.set_prop()
        self.sound = pygame.mixer.Sound("Blop.ogg")\

        self.hspeed = 0
        self.vspeed = 0

    def set_prop(self):

        self.rect = self.image.get_rect()
        self.origin_x = self.rect.centerx
        self.origin_y = self.rect.centery
        self.speed = 5

    def change_speed(self, hspeed, vspeed):
        self.hspeed += hspeed
        self.vspeed += vspeed

    def set_position(self ,x, y):
        self.rect.x = x - self.origin_x
        self.rect.y = y - self.origin_y

    def set_imgage(self, filename = None ):
        if ( filename != None ):

            self.image = pygame.image.load( filename )
            self.set_prop()

    def play_sound( self ):
        self.sound.play()

    def update(self, collidable = pygame.sprite.Group(), event = None):

        self.experience_gravity()

        self.rect.x += self.hspeed

        collision_list = pygame.sprite.spritecollide(self,collidable,False)

        for collided_object in collision_list:
            if (self.hspeed > 0):
                #right
                self.rect.right = collided_object.rect.left
            elif ( self.hspeed < 0):
                self.rect.left = collided_object.rect.right
                #Left

        self.rect.y += self.vspeed

        collision_list = pygame.sprite.spritecollide(self, collidable, False)

        for collided_object in collision_list:
            if (self.vspeed > 0):
                self.rect.bottom = collided_object.rect.top
                self.vspeed = 0
                # down
            elif (self.vspeed < 0):
                self.rect.top = collided_object.rect.bottom
                self.vspeed = 0
                # up
        #events
        if not (event == None):
            if (event.type == pygame.KEYDOWN):
                if (event.key == pygame.K_a): #left
                        self.change_speed(-(self.speed), 0)
                if (event.key == pygame.K_d): #right
                        self.change_speed((self.speed), 0)
                if (event.key == pygame.K_SPACE): #up
                    if(len(collision_list)>= 1):
                        self.change_speed(0, -(self.speed)*2)
                if (event.key == pygame.K_s): #down
                    pass
            if (event.type == pygame.KEYUP):
                if (event.key == pygame.K_a):
                    if (self.hspeed != 0): self.hspeed = 0
                if (event.key == pygame.K_d):
                    if (self.hspeed != 0): self.hspeed = 0
                #if (event.key == pygame.K_SPACE):
                    #if (self.vspeed != 0): self.vspeed = 0
                #if (event.key == pygame.K_s):
                    #if (self.vspeed != 0): self.vspeed = 0

    def experience_gravity(self, gravity= .35):
        if (self.vspeed == 0):
            self.vspeed = 1
        else:
            self.vspeed += gravity

def set_message(text):
    global message, previous_message
    message = font.render( text, True, black, white )
    previous_message = message

if (__name__ == "__main__"):
    pygame.init()
    pygame.mixer.pre_init(44100, 16, 2, 4096)  # frequency, size, channels, buffersize

    window_size = window_width, window_height = 640, 480
    window = pygame.display.set_mode( window_size )

    pygame.display.set_caption( "Test" )

    clock = pygame.time.Clock()
    FPS = 60

#BLOCK GROUPE

    block_group = pygame.sprite.Group()
    #brick
    a_block = Block()
    a_block.set_imgage( "brick.png" )
    a_block.set_position( window_width/2 - 150, window_height/2-100 )
    #red block
    another_block = Block( red )
    another_block.set_position( window_width/2, window_height/2+80 )
    #blue block
    another2_block = Block(blue, 600, 20)
    another2_block.set_position(window_width/2, window_height/2+200)
    #adds both blocks as a groupe
    block_group.add( another_block, a_block, another2_block )

    font = pygame.font.SysFont( "Times New Roman, Arial, none", 30 )

    message = previous_message = None
    set_message( "" )
#all colideable objects
    collidable_objects = pygame.sprite.Group()
    collidable_objects.add(another_block, another2_block)

    running = True

#MAIN LOOP
    while ( running ):

        for event in pygame.event.get():
            if ( event.type == pygame.QUIT ) or \
            ( event.type == pygame.KEYDOWN and \
            ( event.key == pygame.K_ESCAPE )):
                running = False


        clock.tick( FPS )
        window.fill(white)

        a_block.update(collidable_objects, event)
        event = None

        if (pygame.sprite.collide_rect(a_block, another_block)):
            set_message("There is a collision")
        else:
            set_message("")

        if (message != previous_message):
            set_message(message)

        window.blit(message, (window_width / 2 - message.get_rect().width / 2, window_height / 2 - 100))

        block_group.draw(window)

        pygame.display.update()

    pygame.quit()
    quit()







